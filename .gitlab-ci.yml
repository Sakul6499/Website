stages:
  - build
  - test
  - build-docker
  - deploy

build_rust:
  image: rust
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - rustup update nightly
    - rustup default nightly
  script:
    - cargo build --release
  artifacts:
    paths:
      - target/
  only:
    - branches
    - tags
    - api
    - pipelines
    - schedules
    - triggers
    - web
    - merge_requests

build_style:
  image: ubuntu
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - apt update
    - apt install -y sassc
  script:
    - sassc style/style.sass static/style.css
  artifacts:
    paths:
      - static/
  only:
    - branches
    - tags
    - api
    - pipelines
    - schedules
    - triggers
    - web
    - merge_requests

build_client_lib:
  image: rust
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
  script:
    - cd client_lib && wasm-pack build --no-typescript --target web --out-dir ../static/client_lib
  artifacts:
    paths:
      - static/client_lib
  only:
    - branches
    - tags
    - api
    - pipelines
    - schedules
    - triggers
    - web
    - merge_requests

test:
  image: rust
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - rustup update nightly
    - rustup default nightly
  script:
    - cargo test
  needs:
    - build_rust
  only:
    - branches
    - tags
    - api
    - pipelines
    - schedules
    - triggers
    - web
    - merge_requests

build-docker-server:
  stage: build-docker
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE: "$CI_REGISTRY_IMAGE/server"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE:latest || true
    - docker build --cache-from $IMAGE:latest --tag $IMAGE:$CI_COMMIT_SHA --tag $IMAGE:latest -f docker/server/Dockerfile .
    - docker push $IMAGE:$CI_COMMIT_SHA
    - docker push $IMAGE:latest
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then docker tag "$IMAGE:$CI_COMMIT_SHA" "$IMAGE:$CI_COMMIT_BRANCH"; docker push "$IMAGE:$CI_COMMIT_BRANCH"; fi
  needs:
    - build_rust
    - build_style
    - build_client_lib
  only:
    - branches
    - tags
    - api
    - pipelines
    - schedules
    - triggers
    - web
    - merge_requests

build-docker-importer:
  stage: build-docker
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE: "$CI_REGISTRY_IMAGE/importer"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE:latest || true
    - docker build --cache-from $IMAGE:latest --tag $IMAGE:$CI_COMMIT_SHA --tag $IMAGE:latest -f docker/import/Dockerfile .
    - docker push $IMAGE:$CI_COMMIT_SHA
    - docker push $IMAGE:latest
    - if [ "$CI_COMMIT_BRANCH" = "master" ]; then docker tag "$IMAGE:$CI_COMMIT_SHA" "$IMAGE:$CI_COMMIT_BRANCH"; docker push "$IMAGE:$CI_COMMIT_BRANCH"; fi
  needs:
    - build_rust
  only:
    - branches
    - tags
    - api
    - pipelines
    - schedules
    - triggers
    - web
    - merge_requests

deploy:
  stage: deploy
  trigger: sakul6499_de/aether
